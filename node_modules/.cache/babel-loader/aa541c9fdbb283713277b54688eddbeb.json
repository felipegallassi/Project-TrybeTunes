{"ast":null,"code":"var _jsxFileName = \"/home/felipegallassi/ProjectTrybeTunes/sd-019-b-project-trybetunes/src/pages/Album.js\";\nimport React from 'react';\nimport propTypes from 'prop-types';\nimport Header from '../Components/Header';\nimport Loading from '../Components/Loading';\nimport getMusics from '../services/musicsAPI';\nimport MusicCard from '../Components/MusicCard';\nimport { addSong, removeSong, getFavoriteSongs } from '../services/favoriteSongsAPI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Album extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      isLoading: false,\n      musicList: [],\n      album: '',\n      artist: '',\n      image: '',\n      favorite: []\n    };\n    this.handleCheckbox = this.handleCheckbox.bind(this);\n  }\n\n  componentDidMount() {\n    const {\n      match: {\n        params: {\n          id\n        }\n      }\n    } = this.props;\n    this.setState({\n      isLoading: true\n    }, async () => {\n      const results = await getMusics(id);\n      const favSongs = await getFavoriteSongs();\n      this.setState({\n        album: results[0].collectionName,\n        artist: results[0].artistName,\n        image: results[0].artworkUrl100,\n        isLoading: false,\n        musicList: results,\n        favorite: favSongs\n      });\n    });\n  }\n\n  handleCheckbox(_ref, music) {\n    let {\n      target: {\n        checked\n      }\n    } = _ref;\n    this.setState({\n      isLoading: true\n    }, async () => {\n      if (checked) {\n        await addSong(music);\n        this.setState(prevState => ({\n          isLoading: false,\n          favorite: [...prevState.favorite, music]\n        }));\n      } else {\n        await removeSong(music);\n        this.setState(prevState => ({\n          isLoading: false,\n          favorite: prevState.favorite.filter(fav => fav.trackId !== music.trackId)\n        }));\n      }\n    });\n  }\n\n  render() {\n    const {\n      isLoading,\n      musicList,\n      album,\n      artist,\n      image,\n      favorite\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      \"data-testid\": \"page-album\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: image,\n          alt: `${album} - ${artist}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        \"data-testid\": \"album-name\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: album\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        \"data-testid\": \"artist-name\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: artist\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: isLoading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 24\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: musicList.map((music, index) => {\n            if (index !== 0) {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(MusicCard, {\n                  music: music\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 86,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: `favorite-${music.trackId}`,\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    id: `favorite-${music.trackId}`,\n                    type: \"checkbox\",\n                    name: \"favorite\",\n                    \"data-testid\": `checkbox-music-${music.trackId}`,\n                    onChange: e => this.handleCheckbox(e, music),\n                    checked: favorite.some(fav => fav.trackId === music.trackId)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 88,\n                    columnNumber: 27\n                  }, this), \"Favorita\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 87,\n                  columnNumber: 25\n                }, this)]\n              }, music.trackId, true, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 23\n              }, this);\n            }\n\n            return '';\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nAlbum.propTypes = {\n  match: propTypes.shape({\n    params: propTypes.shape({\n      id: propTypes.string\n    })\n  }).isRequired\n};\nexport default Album;","map":{"version":3,"sources":["/home/felipegallassi/ProjectTrybeTunes/sd-019-b-project-trybetunes/src/pages/Album.js"],"names":["React","propTypes","Header","Loading","getMusics","MusicCard","addSong","removeSong","getFavoriteSongs","Album","Component","constructor","state","isLoading","musicList","album","artist","image","favorite","handleCheckbox","bind","componentDidMount","match","params","id","props","setState","results","favSongs","collectionName","artistName","artworkUrl100","music","target","checked","prevState","filter","fav","trackId","render","map","index","e","some","shape","string","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport Header from '../Components/Header';\nimport Loading from '../Components/Loading';\nimport getMusics from '../services/musicsAPI';\nimport MusicCard from '../Components/MusicCard';\nimport { addSong, removeSong, getFavoriteSongs } from '../services/favoriteSongsAPI';\n\nclass Album extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      isLoading: false,\n      musicList: [],\n      album: '',\n      artist: '',\n      image: '',\n      favorite: [],\n    };\n    this.handleCheckbox = this.handleCheckbox.bind(this);\n  }\n\n  componentDidMount() {\n    const { match: { params: { id } } } = this.props;\n    this.setState({\n      isLoading: true,\n    }, async () => {\n      const results = await getMusics(id);\n      const favSongs = await getFavoriteSongs();\n      this.setState({\n        album: results[0].collectionName,\n        artist: results[0].artistName,\n        image: results[0].artworkUrl100,\n        isLoading: false,\n        musicList: results,\n        favorite: favSongs,\n      });\n    });\n  }\n\n  handleCheckbox({ target: { checked } }, music) {\n    this.setState({\n      isLoading: true,\n    }, async () => {\n      if (checked) {\n        await addSong(music);\n        this.setState((prevState) => ({\n          isLoading: false,\n          favorite: [...prevState.favorite, music],\n        }));\n      } else {\n        await removeSong(music);\n        this.setState((prevState) => ({\n          isLoading: false,\n          favorite: prevState.favorite.filter((fav) => (\n            fav.trackId !== music.trackId\n          )),\n        }));\n      }\n    });\n  }\n\n  render() {\n    const { isLoading, musicList, album, artist, image, favorite } = this.state;\n    return (\n      <div data-testid=\"page-album\">\n        <Header />\n        <div>\n          <img src={ image } alt={ `${album} - ${artist}` } />\n        </div>\n        <div data-testid=\"album-name\">\n          <h3>{ album }</h3>\n        </div>\n        <div data-testid=\"artist-name\">\n          <p>{ artist }</p>\n        </div>\n        <div>\n          {isLoading ? <Loading />\n            : (\n              <div>\n                { musicList.map((music, index) => {\n                  if (index !== 0) {\n                    return (\n                      <div key={ music.trackId }>\n                        <MusicCard music={ music } />\n                        <label htmlFor={ `favorite-${music.trackId}` }>\n                          <input\n                            id={ `favorite-${music.trackId}` }\n                            type=\"checkbox\"\n                            name=\"favorite\"\n                            data-testid={ `checkbox-music-${music.trackId}` }\n                            onChange={ (e) => this.handleCheckbox(e, music) }\n                            checked={ favorite\n                              .some((fav) => fav.trackId === music.trackId) }\n                          />\n                          Favorita\n                        </label>\n                      </div>\n                    );\n                  } return '';\n                })}\n              </div>)}\n        </div>\n      </div>\n    );\n  }\n}\nAlbum.propTypes = {\n  match: propTypes.shape({\n    params: propTypes.shape({\n      id: propTypes.string,\n    }),\n  }).isRequired,\n};\nexport default Album;\n"]},"metadata":{},"sourceType":"module"}